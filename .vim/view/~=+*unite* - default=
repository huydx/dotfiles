let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
argglobal
let s:cpo_save=&cpo
set cpo&vim
inoremap <buffer> <silent> <Plug>(unite_select_previous_line) :call unite#mappings#loop_cursor_up_call(    0, 'i')
imap <buffer> <Home> <Plug>(unite_move_head)
imap <buffer> <BS> <Plug>(unite_delete_backward_char)
imap <buffer> <Up> <Plug>(unite_select_previous_line)
imap <buffer> <Down> <Plug>(unite_select_next_line)
inoremap <buffer> <silent> <expr> <Plug>(unite_do_default_action) unite#do_action(unite#get_current_unite().context.default_action)
inoremap <buffer> <silent> <Plug>(unite_quick_match_choose_action) :call unite#mappings#_quick_match(1)
inoremap <buffer> <silent> <Plug>(unite_quick_match_default_action) :call unite#mappings#_quick_match(0)
inoremap <buffer> <expr> <Plug>(unite_select_previous_page) pumvisible() ? "\<PageUp>" : repeat("\<Up>", winheight(0))
inoremap <buffer> <expr> <Plug>(unite_select_next_page) pumvisible() ? "\<PageDown>" : repeat("\<Down>", winheight(0))
inoremap <buffer> <silent> <Plug>(unite_skip_previous_line) :call unite#mappings#loop_cursor_up_call(    1, 'i')
inoremap <buffer> <silent> <expr> <Plug>(unite_insert_leave) "\0".((line('.') <= unite#get_current_unite().prompt_linenr) ? (unite#get_current_unite().prompt_linenr+1)."G" : "") . ":call unite#redraw()\"
nmap <buffer>  <Plug>(unite_print_message_log)
nmap <buffer>  <Plug>(unite_delete_backward_path)
nmap <buffer> 	 <Plug>(unite_choose_action)
nmap <buffer>  <Plug>(unite_redraw)
nmap <buffer>  <Plug>(unite_do_default_action)
nmap <buffer>  <Plug>(unite_rotate_next_source)
nmap <buffer>  <Plug>(unite_rotate_previous_source)
nmap <buffer>  <Plug>(unite_restart)
xmap <buffer>   <Plug>(unite_toggle_mark_selected_candidates)
nmap <buffer>   <Plug>(unite_toggle_mark_current_candidate)
nmap <buffer> * <Plug>(unite_toggle_mark_all_candidates)
nmap <buffer> . <Plug>(unite_narrowing_dot)
nmap <buffer> ? <Plug>(unite_quick_help)
nmap <buffer> A <Plug>(unite_append_end)
nmap <buffer> G <Plug>(unite_cursor_bottom)
nmap <buffer> I <Plug>(unite_insert_head)
nmap <buffer> J <Plug>(unite_skip_cursor_down)
nmap <buffer> K <Plug>(unite_skip_cursor_up)
nmap <buffer> M <Plug>(unite_disable_max_candidates)
nmap <buffer> N <Plug>(unite_new_candidate)
nmap <buffer> Q <Plug>(unite_all_exit)
nmap <buffer> <silent> <expr> a unite#smart_map("\<Plug>(unite_append_enter)",                 "\<Plug>(unite_choose_action)")
nnoremap <buffer> <silent> <expr> b unite#smart_map('b', unite#do_action('bookmark'))
nnoremap <buffer> <silent> <expr> d unite#smart_map('d', unite#do_action('delete'))
nnoremap <buffer> <silent> <expr> e unite#smart_map('e', unite#do_action('edit'))
nmap <buffer> gg <Plug>(unite_cursor_top)
nmap <buffer> i <Plug>(unite_insert_enter)
nmap <buffer> j <Plug>(unite_loop_cursor_down)
nmap <buffer> k <Plug>(unite_loop_cursor_up)
nnoremap <buffer> <silent> <expr> p unite#do_action('preview')
nmap <buffer> q <Plug>(unite_exit)
nnoremap <buffer> <silent> <expr> t unite#smart_map('t', unite#do_action('tabopen'))
nmap <buffer> <silent> <expr> x unite#smart_map('x', "\<Plug>(unite_quick_match_default_action)")
nnoremap <buffer> <silent> <expr> yy unite#smart_map('yy', unite#do_action('yank'))
nnoremap <buffer> <silent> <Plug>(unite_skip_cursor_up) :call unite#mappings#loop_cursor_up_call(    1, 'n')
nnoremap <buffer> <silent> <Plug>(unite_loop_cursor_up) :call unite#mappings#loop_cursor_up_call(    0, 'n')
nmap <buffer> <Up> <Plug>(unite_loop_cursor_up)
nmap <buffer> <Down> <Plug>(unite_loop_cursor_down)
nnoremap <buffer> <silent> <expr> <Plug>(unite_do_default_action) unite#do_action(unite#get_current_unite().context.default_action)
nnoremap <buffer> <silent> <Plug>(unite_quick_match_choose_action) :call unite#mappings#_quick_match(1)
nnoremap <buffer> <silent> <Plug>(unite_quick_match_default_action) :call unite#mappings#_quick_match(0)
nnoremap <buffer> <expr> <Plug>(unite_cursor_top) unite#get_current_unite().prompt_linenr.'G0z.'
imap <buffer>  <Plug>(unite_move_head)
imap <buffer>  <Plug>(unite_select_previous_page)
inoremap <buffer> <silent> <expr>  unite#do_action('delete')
inoremap <buffer> <silent> <expr>  unite#do_action('edit')
imap <buffer>  <Plug>(unite_select_next_page)
imap <buffer>  <Plug>(unite_exit)
imap <buffer>  <Plug>(unite_delete_backward_char)
imap <buffer> 	 <Plug>(unite_choose_action)
imap <buffer>  <Plug>(unite_redraw)
imap <buffer>  <Plug>(unite_do_default_action)
imap <buffer>  <Plug>(unite_select_next_line)
imap <buffer>  <Plug>(unite_select_previous_line)
inoremap <buffer> <silent> <expr>  unite#do_action('tabopen')
imap <buffer>  <Plug>(unite_delete_backward_line)
imap <buffer>  <Plug>(unite_delete_backward_word)
inoremap <buffer> <silent> <expr>  unite#do_action('yank')
imap <buffer>  <Plug>(unite_insert_leave)
imap <buffer> <silent> <expr>   unite#smart_map(' ', "\<Plug>(unite_toggle_mark_current_candidate)")
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal balloonexpr=
setlocal nobinary
setlocal bufhidden=hide
setlocal nobuflisted
setlocal buftype=nofile
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=0
setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=n
setlocal conceallevel=3
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'unite'
setlocal filetype=unite
endif
setlocal foldcolumn=0
setlocal nofoldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=tcq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=2
setlocal imsearch=2
setlocal include=
setlocal includeexpr=
setlocal indentexpr=
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255,-,+,\\,!,~
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
setlocal nolist
setlocal nomacmeta
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal nomodeline
setlocal modifiable
setlocal nrformats=octal,hex
setlocal nonumber
setlocal numberwidth=4
setlocal omnifunc=
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=2
setlocal noshortname
setlocal smartindent
setlocal softtabstop=0
setlocal nospell
setlocal spellcapcheck=
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=*unite*\ :\ %{unite#get_status_string()}
setlocal suffixesadd=
setlocal noswapfile
setlocal synmaxcol=3000
if &syntax != 'unite'
setlocal syntax=unite
endif
setlocal tabstop=2
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal noundofile
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal nowrap
setlocal wrapmargin=0
let s:l = 1 - ((0 * winheight(0) + 10) / 20)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
1
normal! 0
lcd ~/
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
" vim: set ft=vim :
